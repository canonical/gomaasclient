# This file contains all available configuration options
# https://golangci-lint.run/usage/linters/

run:
  timeout: 5m
  issues-exit-code: 1
  tests: true
  # Enables skipping of directories:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true

  # If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # By default, it isn't set.
  modules-download-mode: readonly

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: false

# output configuration options
output:
  # The formats used to render issues.
  # Format: `colored-line-number`, `line-number`, `json`, `colored-tab`, `tab`, `checkstyle`, `code-climate`, `junit-xml`, `github-actions`, `teamcity`
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  #
  # For the CLI flag (`--out-format`), multiple formats can be specified by separating them by comma.
  # The output can be specified for each of them by separating format name and path by colon symbol.
  # Example: "--out-format=checkstyle:report.xml,json:stdout,colored-line-number"
  # The CLI flag (`--out-format`) override the configuration file.
  #
  # Default:
  #   formats:
  #     - format: colored-line-number
  #       path: stdout
  formats:
    - format: colored-line-number
      path: stdout

  # Print lines of code with issue.
  # Default: true
  print-issued-lines: true

  # Print linter name in the end of issue text.
  # Default: true
  print-linter-name: true

  # Make issues output unique by line.
  # Default: true
  uniq-by-line: true

  # Add a prefix to the output file references.
  # Default is no prefix.
  path-prefix: ""

  # Sort results by: filepath, line and column.
  sort-results: false

linters:
  disable-all: true
  enable:
    - dupl
    - errcheck
    - exportloopref
    - gocritic
    - gofmt
    - goimports
    - gosec
    - gosimple
    - govet
    - nilerr
    - nilnil
    - noctx
    - nolintlint
    - nonamedreturns
    - revive
    - staticcheck
    - stylecheck
    - tagliatelle
    - unused
    - whitespace
    - wsl
    - zerologlint

linters-settings:
  errcheck:
    check-type-assertions: true
    check-blank: true
  gosimple:
    checks: ["all"]
  govet:
    enable-all: true
  nolintlint:
    require-explanation: true
    require-specific: true
  revive:
    ignore-generated-header: true
    rules:
      - name: time-equal
        severity: warning
        disabled: false
      - name: errorf
        severity: warning
        disabled: false
      - name: context-as-argument
        severity: warning
        disabled: false
      - name: error-return
        severity: warning
        disabled: false
      - name: datarace
        severity: warning
        disabled: false
  staticcheck:
    checks: ["all"]
  stylecheck:
    checks: ["all"]
  tagliatelle:
    case:
      rules:
        json: snake
        yaml: snake

issues:
  # List of regexps of issue texts to exclude.
  #
  # But independently of this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`.
  # To list all excluded by default patterns execute `golangci-lint run --help`
  #
  # Default: https://golangci-lint.run/usage/false-positives/#default-exclusions
  exclude: []

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec

    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via `nolint` comments.
    # `/` will be replaced by current OS file path separator to properly work on Windows.

    # Exclude `lll` issues for long lines with `go:generate`.
    - linters:
        - lll
      source: "^//go:generate "

    - path: internal/
      text: "ST1000:"
      linters:
        - stylecheck

    - path: internal/
      text: "package-comments:"
      linters:
        - revive

    - path: internal/
      text: "exported:"
      linters:
        - revive

    - path: main\.go
      text: "package-comments:"
      linters:
        - revive

    - path: _test\.go
      text: "fieldalignment:"
      linters:
        - govet

  # Which files to skip: they will be analyzed, but issues from them won't be reported.
  # Default value is empty list,
  # but there is no need to include all autogenerated files,
  # we confidently recognize autogenerated files.
  # If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  exclude-files:
    - ".*\\.my\\.go$"
    - lib/bad.go

  # Independently of option `exclude` we use default exclude patterns,
  # it can be disabled by this option.
  # To list all excluded by default patterns execute `golangci-lint run --help`.
  # Default: true.
  exclude-use-default: false

  # If set to true exclude and exclude-rules regular expressions become case-sensitive.
  # Default: false
  exclude-case-sensitive: false

  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing large codebase.
  # It's not practical to fix all existing issues at the moment of integration:
  # much better don't allow issues in new code.
  #
  # Default: false.
  new: false

  # Fix found issues (if it's supported by the linter).
  fix: false

severity:
  # Set the default severity for issues.
  #
  # If severity rules are defined and the issues do not match or no severity is provided to the rule
  # this will be the default severity applied.
  # Severities should match the supported severity names of the selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#SeverityLevel
  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  # - TeamCity: https://www.jetbrains.com/help/teamcity/service-messages.html#Inspection+Instance
  #
  # Default value is an empty string.
  default-severity: error

  # If set to true `severity-rules` regular expressions become case-sensitive.
  # Default: false
  case-sensitive: true

  # When a list of severity rules are provided, severity information will be added to lint issues.
  # Severity rules have the same filtering capability as exclude rules
  # except you are allowed to specify one matcher per severity rule.
  # Only affects out formats that support setting severity information.
  #
  # Default: []
  rules:
    - linters:
        - dupl
      severity: info
